[{"path":"https://alicenjoyhenning.github.io/DamageDetective/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU Affero General Public License","title":"GNU Affero General Public License","text":"Version 3, 19 November 2007 Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU Affero General Public License","text":"GNU Affero General Public License free, copyleft license software kinds works, specifically designed ensure cooperation community case network server software. licenses software practical works designed take away freedom share change works. contrast, General Public Licenses intended guarantee freedom share change versions program–make sure remains free software users. speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. Developers use General Public Licenses protect rights two steps: (1) assert copyright software, (2) offer License gives legal permission copy, distribute /modify software. secondary benefit defending users’ freedom improvements made alternate versions program, receive widespread use, become available developers incorporate. Many developers free software heartened encouraged resulting cooperation. However, case software used network servers, result may fail come . GNU General Public License permits making modified version letting public access server without ever releasing source code public. GNU Affero General Public License designed specifically ensure , cases, modified source code becomes available community. requires operator network server provide source code modified version running users server. Therefore, public use modified version, publicly accessible server, gives public access source code modified version. older license, called Affero General Public License published Affero, designed accomplish similar goals. different license, version Affero GPL, Affero released new version Affero GPL permits relicensing license. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://alicenjoyhenning.github.io/DamageDetective/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions.","title":"GNU Affero General Public License","text":"“License” refers version 3 GNU Affero General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code.","title":"GNU Affero General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions.","title":"GNU Affero General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law.","title":"GNU Affero General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies.","title":"GNU Affero General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions.","title":"GNU Affero General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: work must carry prominent notices stating modified , giving relevant date. work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms.","title":"GNU Affero General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms.","title":"GNU Affero General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: Disclaiming warranty limiting liability differently terms sections 15 16 License; Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; Limiting use publicity purposes names licensors authors material; Declining grant rights trademark law use trade names, trademarks, service marks; Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination.","title":"GNU Affero General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies.","title":"GNU Affero General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients.","title":"GNU Affero General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents.","title":"GNU Affero General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom.","title":"GNU Affero General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/LICENSE.html","id":"id_13-remote-network-interaction-use-with-the-gnu-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Remote Network Interaction; Use with the GNU General Public License.","title":"GNU Affero General Public License","text":"Notwithstanding provision License, modify Program, modified version must prominently offer users interacting remotely computer network (version supports interaction) opportunity receive Corresponding Source version providing access Corresponding Source network server charge, standard customary means facilitating copying software. Corresponding Source shall include Corresponding Source work covered version 3 GNU General Public License incorporated pursuant following paragraph. Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU General Public License single combined work, convey resulting work. terms License continue apply part covered work, work combined remain governed version 3 GNU General Public License.","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License.","title":"GNU Affero General Public License","text":"Free Software Foundation may publish revised /new versions GNU Affero General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU Affero General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU Affero General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU Affero General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty.","title":"GNU Affero General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability.","title":"GNU Affero General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16.","title":"GNU Affero General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU Affero General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. software can interact users remotely computer network, also make sure provides way users get source. example, program web application, interface display “Source” link leads users archive code. many ways offer source, different solutions better different programs; see section 13 specific requirements. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU AGPL, see https://www.gnu.org/licenses/.","code":"<one line to give the program's name and a brief idea of what it does.>     Copyright (C) <year>  <name of author>      This program is free software: you can redistribute it and/or modify     it under the terms of the GNU Affero General Public License as     published by the Free Software Foundation, either version 3 of the     License, or (at your option) any later version.      This program is distributed in the hope that it will be useful,     but WITHOUT ANY WARRANTY; without even the implied warranty of     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the     GNU Affero General Public License for more details.      You should have received a copy of the GNU Affero General Public License     along with this program.  If not, see <https://www.gnu.org/licenses/>."},{"path":"https://alicenjoyhenning.github.io/DamageDetective/articles/DamageDetective.html","id":"simulating-damaged-cells-simulate_counts","dir":"Articles","previous_headings":"","what":"Simulating Damaged Cells (simulate_counts)","title":"DamageDetective","text":"core feature DamageDetective ability predict scRNA-seq data might appear cells undergone RNA damage. modeled simulating loss cytoplasmic RNA, greater loss corresponds increased damage severity. simulate_counts function applies simulation, allowing users introduce damage defined proportion cells input count matrix. primarily used within detect_damage, also available standalone use aid exploratory data analysis ground truth dataset generation. Plot 1. Scatter plot simulated damaged data. function also outputs qc_summary table comparing quality control metrics simulation: Additionally, simulate_counts produces plots illustrating quality metric distributions simulated damage displayed default accessed shown . Plot 2. Scatter plot simulated damaged data. control severity distribution simulated damage, users can adjust: - target_damage: Specifies range RNA loss per cell. - damage_distribution: Defines damage spread across cells. example, simulating severe damage (70-99% RNA loss) right-skewed distribution: Plot 3. Scatter plot right-skewed simulated damaged data. details, refer :","code":"# Simulating damage in 25% of cells damaged_counts <- simulate_counts(   count_matrix = test_counts,   damage_proportion = 0.20 ) # View dimensions dim(damaged_counts$matrix) #> [1] 10009   500  # Preview the altered counts damaged_counts$matrix[1:5, 1:5] #>                 GGCTCGACATCTACGA GCGACCAAGAATCTCC GGAATAATCTTAACCT #> MTCO1P12                       0                0                0 #> MTATP6P1                       0                2                1 #> ENSG00000291215                0                0                0 #> LINC00115                      0                0                0 #> LINC01128                      0                2                0 #>                 TGGGAAGGTCGAACAG ACTATCTAGAGGTAGA #> MTCO1P12                       0                0 #> MTATP6P1                       1                0 #> ENSG00000291215                0                0 #> LINC00115                      0                0 #> LINC01128                      0                0 head(damaged_counts$qc_summary, 5) #>               Cell Damaged_Level Original_Features New_Features #> 1 GGCTCGACATCTACGA     0.0000000               358          358 #> 2 GCGACCAAGAATCTCC     0.0000000              2110         2110 #> 3 GGAATAATCTTAACCT     0.0000000               959          959 #> 4 TGGGAAGGTCGAACAG     0.0000000               849          849 #> 5 ACTATCTAGAGGTAGA     0.3452416               508          355 #>   Original_MitoProp New_MitoProp Original_RiboProp New_RiboProp #> 1        0.08073394   0.08073394       0.100917431   0.10091743 #> 2        0.05470840   0.05470840       0.109818085   0.10981808 #> 3        0.13801115   0.13801115       0.157063197   0.15706320 #> 4        0.10303030   0.10303030       0.196270396   0.19627040 #> 5        0.53384615   0.66095238       0.009230769   0.01047619 damaged_counts$plot damaged_counts <- simulate_counts(   count_matrix = test_counts,   damage_proportion = 0.25,   target_damage = c(0.7, 0.99),   damage_distribution = \"right_skewed\" ) # ?simulate_counts()"},{"path":"https://alicenjoyhenning.github.io/DamageDetective/articles/DamageDetective.html","id":"detecting-damaged-cells-detect_damage","dir":"Articles","previous_headings":"","what":"Detecting Damaged Cells (detect_damage)","title":"DamageDetective","text":"DamageDetective offers automated damage assessment via detect_damage function, assigns cell damage score. using detect_damage, important ensure damage simulation accurate possible data. Based observations true single cell data, find ribosomal RNA loss occurs less frequently expected based abundance alone needs adjusted numerical value (ribosome_penalty) 0 1. lower values ribosome_penalty (closer zero) better approximate true data, default 0.01, can refined input data using select_penalty function. details, refer : Using refined ribosomal penalty found, damage detection can run follows, Plot 4. Scatter plot damage levels detected. Cells high damage scores can filtered retain high-quality data: convenience, detect_damage can return filtered count matrix directly enabling filter_counts = TRUE. details, refer :","code":"penalty <- select_penalty(   count_matrix = test_counts ) #> Testing penalty of 0.001... #> Testing penalty of 0.006... #> Testing penalty of 0.011... #> Testing penalty of 0.016... #> Testing penalty of 0.021... #> Testing penalty of 0.026... #> Testing penalty of 0.031... #> Testing penalty of 0.036... #> Testing penalty of 0.041... #> Testing penalty of 0.046... #> Stopping early: dTNN is no longer improving.  print(penalty) #> [1] 0.026 # ?select_penalty() damage_results <- detect_damage(   count_matrix = test_counts,    ribosome_penalty = penalty ) #> Simulating cells between 1e-05 and 0.08 RNA loss... #> Simulating cells between 0.1 and 0.3 RNA loss... #> Simulating cells between 0.3 and 0.5 RNA loss... #> Simulating cells between 0.5 and 0.7 RNA loss... #> Simulating cells between 0.7 and 0.9 RNA loss... #> Computing pANN... # View the damage scores head(damage_results$output) #>                             Cells DamageDetective #> GGCTCGACATCTACGA GGCTCGACATCTACGA      0.64166667 #> GCGACCAAGAATCTCC GCGACCAAGAATCTCC      0.14615385 #> GGAATAATCTTAACCT GGAATAATCTTAACCT      0.20769231 #> TGGGAAGGTCGAACAG TGGGAAGGTCGAACAG      0.17692308 #> ACTATCTAGAGGTAGA ACTATCTAGAGGTAGA      0.86129032 #> GCATGATCACTCTGTC GCATGATCACTCTGTC      0.02909727 filtered_counts <- test_counts[, damage_results$qc_summary$DamageDetective < 0.7] filtered_counts <- detect_damage(   count_matrix = test_counts,   ribosome_penalty = 0.01,   filter_counts = TRUE,   filter_threshold = 0.7,    generate_plot = FALSE ) #> Simulating cells between 1e-05 and 0.08 RNA loss... #> Simulating cells between 0.1 and 0.3 RNA loss... #> Simulating cells between 0.3 and 0.5 RNA loss... #> Simulating cells between 0.5 and 0.7 RNA loss... #> Simulating cells between 0.7 and 0.9 RNA loss... #> Computing pANN...  class(filtered_counts) #> [1] \"dgCMatrix\" #> attr(,\"package\") #> [1] \"Matrix\" dim(filtered_counts) #> [1] 10009   474 # ?detect_damage()"},{"path":"https://alicenjoyhenning.github.io/DamageDetective/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alicen Henning. Author, maintainer, copyright holder.","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Henning (2025). DamageDetective: Detect Damage Single Cell RNA Sequencing Data. R package version 0.0.1, https://alicenjoyhenning.github.io/DamageDetective/.","code":"@Manual{,   title = {DamageDetective: Detect Damage in Single Cell RNA Sequencing Data},   author = {Alicen Henning},   year = {2025},   note = {R package version 0.0.1},   url = {https://alicenjoyhenning.github.io/DamageDetective/}, }"},{"path":[]},{"path":"https://alicenjoyhenning.github.io/DamageDetective/index.html","id":"content","dir":"","previous_headings":"","what":"Content","title":"Detect Damage in Single Cell RNA Sequencing Data","text":"Description | Installation | Quick start | Authors | License | References","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Detect Damage in Single Cell RNA Sequencing Data","text":"Damaged cells class low-quality artifacts single-cell RNA sequencing (scRNA-seq) describing cells succumbed stress sequenced. results altered gene expression profiles, retaining damaged cells downstream analyses compromises reliability analysis. detection removal damaged cells therefore standard practice pre-processing scRNA-seq data. Current approaches detect damage according deviations cell-level quality control metrics influenced loss plasma membrane integrity, well-accepted consequence damage. However, approach assumes viable cells follow similar distributions, assumption always hold heterogeneous samples. recent methods improve upon analysing cells population level, isolating cells similar distributions assessing finer deviations. However, assumes distinct populations represent true cells meaning abundant, damaged cells risk misclassification true cells. Ultimately, filtering decisions current approaches motivated statistical definitions deviation biological definitions damage, non-linear, stochastic process varies across cell types. DamageDetective takes different approach inspired DoubletFinder*^*, high performing community accepted tool doublet removal scRNA-seq. , rather detecting damage measuring extent cells deviate , detected measuring extent cells align artificially damaged versions . Grounded, , loss plasma membrane integrity, approach simulates damage probabilistic escape cytoplasmic RNA proportion escape assumed directly reflect damage severity. comparing expression profiles true cells artificially damaged cell profiles reduced-dimensional space, DamageDetective estimates damage severity true cells score 0 1. provides intuitive scale filtering, based directly biological definitions damage, standardised across cell types, samples, experiments.","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Detect Damage in Single Cell RNA Sequencing Data","text":"DamageDetective can installed CRAN using, Alternatively, latest development version can installed directly GitHub using, verify installation, run following see can view package vignette function help page,","code":"install.packages('DamageDetective') library(devtools) devtools::install_github(\"AlicenJoyHenning/DamageDetective\", build_vignettes = TRUE) library(DamageDetective) help(package = \"DamageDetective\") ?DamageDetective()"},{"path":"https://alicenjoyhenning.github.io/DamageDetective/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick start","title":"Detect Damage in Single Cell RNA Sequencing Data","text":"demonstrations can followed immediately loading package serve test ensure running smoothly. function descriptions usage examples please refer package vignette. Begin loading dummy data provided package, test_counts, artificial PBMC dataset containing 500 cells 10009 genes. Return default output primary goal DamageDetective inform filtering damaged cells single cell data. can achieved using detect_damage function requires count matrix input returns data frame containing barcodes count matrix estimated levels damage. results can accessed output slot used inform filtering cells count matrix. filtering cells damage level 70 %, default, detect_damage provide plots data cell point coloured according damage level estimated DamageDetective. stored default_test$plot ggplot2 object can manipulated using ggplot2 functionality. disable plotting, indicate using generate_plot = FALSE argument. Return filtered output Alternatively, instead returning annotated data frame, detect_damage can return filtered count matrix filter_threshold = TRUE. , just , filtering done according threshold estimated level damage, specified using filter_threshold parameter. default, filter_threshold = 0.75. Essentially, provides means automating filtering process shown . explore parameters , can visit package vignette via function help page,","code":"data(\"test_counts\", package = \"DamageDetective\") dim(test_counts) # [1] 10009   500 # Perform damage detection default_test <- detect_damage(   count_matrix = test_counts )  # View output head(default_test$qc_summary)  #   # Filter cells with an estimated damage level above 70 %  undamaged_cells <- subset(default_test$qc_summary, DamageDetective > 0.7) filtered_counts <- test_counts[, undamaged_cells] # Perform damage detection & filtering according to non-default threshold filtered_test <- detect_damage(   count_matrix = test_counts,    filter_counts = TRUE,   filter_threshold = 0.7 )  # View output head(filtered_test)  dim(filtered_test) # ?detect_damage()"},{"path":"https://alicenjoyhenning.github.io/DamageDetective/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Detect Damage in Single Cell RNA Sequencing Data","text":"DamageDetective made available public use GNU AGPL-3.0 license.","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/index.html","id":"authors","dir":"","previous_headings":"","what":"Authors","title":"Detect Damage in Single Cell RNA Sequencing Data","text":"Alicen Henning Stellenbosch University, Cape Town, South Africa Bioinformatics Computational Biology work done supervision Prof Marlo Möller, Prof Gian van der Spuy, Prof André Loxton.","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Detect Damage in Single Cell RNA Sequencing Data","text":"McGinnis, C. S., Murrow, L. M., & Gartner, Z. J. (2019). DoubletFinder: Doublet Detection Single-Cell RNA Sequencing Data Using Artificial Nearest Neighbors. Cell Systems, 8(4), 329-337.e4. https://doi.org/10.1016/j.cels.2019.03.003","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/reference/detect_damage.html","id":null,"dir":"Reference","previous_headings":"","what":"detect_damage — detect_damage","title":"detect_damage — detect_damage","text":"Quality control function identify filter damaged cells input count matrix, 'damage' defined loss cytoplasmic RNA.","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/reference/detect_damage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"detect_damage — detect_damage","text":"","code":"detect_damage(   count_matrix,   ribosome_penalty = 0.01,   organism = \"Hsap\",   annotated_celltypes = FALSE,   target_damage = c(0.1, 0.8),   damage_distribution = \"right_skewed\",   distribution_steepness = \"moderate\",   beta_shape_parameters = NULL,   project_name = \"Project\",   filter_threshold = 0.75,   damage_levels = 5,   damage_proportion = 0.15,   mito_quantile = 0.75,   kN = NULL,   generate_plot = TRUE,   filter_counts = FALSE,   verbose = TRUE )"},{"path":"https://alicenjoyhenning.github.io/DamageDetective/reference/detect_damage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"detect_damage — detect_damage","text":"count_matrix Matrix dgCMatrix containing counts single cell RNA sequencing data. ribosome_penalty Numeric specifying factor probability loosing transcript ribosomal gene multiplied . , values closer 0 represent greater penalty. Default 0.01. organism String specifying organism origin input data two standard options, \"Hsap\" \"Mmus\" user wishes use non-standard organism must input list containing strings patterns match mitochondrial ribosomal genes organism. available, nuclear-encoded genes likely retained nucleus, nuclear speckles, must also specified. example humans , organism = c(mito_pattern = \"^MT-\", ribo_pattern = \"^(RPS|RPL)\", nuclear <- c(\"NEAT1\",\"XIST\", \"MALAT1\") Default \"Hsap\" annotated_celltypes Boolean specifying whether input matrix cell type information stored. Default FALSE target_damage Numeric vector specifying upper lower range level damage introduced. , damage refers amount cytoplasmic RNA lost cell values closer 1 indicate loss therefore heavily damaged cells. Default c(0.1, 0.8) damage_distribution String specifying whether distribution damage levels among damaged cells shifted towards upper lower range damage specified 'target_damage' follow symmetric distribution . three valid options: \"right_skewed\" \"left_skewed\" \"symmetric\" Default \"right_skewed\" distribution_steepness String specifying concentrated spread damaged cells mean target distribution specified 'target_damage'. , increase steepness manifests apparent skewness.three valid options: \"shallow\" \"moderate\" \"steep\" Default \"moderate\" beta_shape_parameters Numeric vector allows shape parameters beta distribution defined explicitly. offers greater flexibility allowed 'damage_distribution' 'distribution_steepness' parameters override defaults offer. Default 'NULL' project_name String specifying project identifier. Intended generating quality control plots distinct across samples. However, otherwise relevant function. Default \"Project\" filter_threshold Numeric specifying proportion RNA loss cell considered damaged. Default 0.75. damage_levels Numeric specifying number distinct sets artificial damaged cells simulated, defined range loss. Default ptions include, 3 : c(0.00001, 0.08), c(0.1, 0.4), c(0.5, 0.9) 5 : c(0.00001, 0.08), c(0.1, 0.3), c(0.3, 0.5), c(0.5, 0.7), c(0.7, 0.9) 7 : c(0.00001, 0.08), c(0.1, 0.3), c(0.3, 0.4), c(0.4, 0.5), c(0.5, 0.7), c(0.7, 0.9), c(0.9, 0.99999). user can also provide list specifying sets ranges loss, damage_levels = list( pANN_50 = c(0.1, 0.5), pANN_100 = c(0.5, 1) ) introducing sets damage user can improve accuracy loss estimations (scaled_pANN) found scaling pANN within set according lower upper boundary set's damage level. However, introducing sets increases computational time function. Default 5. damage_proportion Numeric describing proportion input data altered resemble damaged data. Must range 0 1. mito_quantile Numeric 0 1 specifying level mitochondrial proportion cells sampled simulations. step done protect simulating damaged cell profiles cells likely damaged. Default 0.75. kN Numeric describing many nearest neighbours considered pANN calculations. kN exceed total cell number. Default one third total cell number. generate_plot Boolean specifying whether output QC plot outputted. QC plots generated default recommend verifying perturbed data retains characteristics true single cell data. Default TRUE. filter_counts Boolean specifying whether output matrix filtered, returned containing cells fall filter threshold. Alternatively, data frame containing cell barcodes associated label either 'damaged' 'cell' returned. Default FALSE. verbose Boolean specifying whether messages function progress displayed console. Default TRUE.","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/reference/detect_damage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"detect_damage — detect_damage","text":"Filtered matrix data frame containing damage labels.","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/reference/detect_damage.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"detect_damage — detect_damage","text":"Using simulation framework simulate_counts(), detect_damage() generates artificially damaged cell profiles introducing defined levels RNA loss input data. True artificial cells merged pre-processed compute following quality control metrics: Log-normalized feature count Log-normalized total counts Mitochondrial proportion Ribosomal proportion Log-normalized MALAT1 gene expression Principal component analysis (PCA) performed metrics, Euclidean distance matrix constructed PC embeddings. true cell, proportion nearest neighbors artificial cells (pANN) calculated across damage levels damage level highest pANN assigned true cell. Finally, cells exceeding specified damage threshold, filter_threshold, marked damaged. filtering method inspired approaches developed DoubletFinder (McGinnis et al., 2019) detect doublets single-cell data.","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/reference/detect_damage.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"detect_damage — detect_damage","text":"McGinnis, C. S., Murrow, L. M., & Gartner, Z. J. (2019). DoubletFinder: Doublet Detection Single-Cell RNA Sequencing Data Using Artificial Nearest Neighbors. Cell Systems, 8(4), 329-337.e4. doi:10.1016/j.cels.2019.03.003","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/reference/detect_damage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"detect_damage — detect_damage","text":"","code":"data(\"test_counts\", package = \"DamageDetective\")  test <- detect_damage(   count_matrix = test_counts,   ribosome_penalty = 0.001,   project_name = \"Test\",   generate_plot = FALSE ) #> Simulating cells between 1e-05 and 0.08 RNA loss... #> Simulating cells between 0.1 and 0.3 RNA loss... #> Simulating cells between 0.3 and 0.5 RNA loss... #> Simulating cells between 0.5 and 0.7 RNA loss... #> Simulating cells between 0.7 and 0.9 RNA loss... #> Computing pANN..."},{"path":"https://alicenjoyhenning.github.io/DamageDetective/reference/get_organism_indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve genes corresponding to the organism of interest — get_organism_indices","title":"Retrieve genes corresponding to the organism of interest — get_organism_indices","text":"Retrieve genes corresponding organism interest","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/reference/get_organism_indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve genes corresponding to the organism of interest — get_organism_indices","text":"","code":"get_organism_indices(count_matrix, organism)"},{"path":"https://alicenjoyhenning.github.io/DamageDetective/reference/get_organism_indices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve genes corresponding to the organism of interest — get_organism_indices","text":"count_matrix Matrix dgCMatrix containing counts single cell RNA sequencing data. organism String specifying organism origin input data two standard options, \"Hsap\" \"Mmus\" user wishes use non-standard organism must input list containing strings patterns match mitochondrial ribosomal genes organism. available, nuclear-encoded genes likely retained nucleus, nuclear speckles, must also specified. example humans , organism = c(mito_pattern = \"^MT-\", ribo_pattern = \"^(RPS|RPL)\", nuclear <- c(\"NEAT1\",\"XIST\", \"MALAT1\") Default \"Hsap\"","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/reference/get_organism_indices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve genes corresponding to the organism of interest — get_organism_indices","text":"List containing indices count matrix corresponding mitochondrial, non-mitochondrial, ribosomal gene sets.","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/reference/plot_outcome.html","id":null,"dir":"Reference","previous_headings":"","what":"plot_outcome — plot_outcome","title":"plot_outcome — plot_outcome","text":"Helper function generate scatter plot summary statistics.","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/reference/plot_outcome.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot_outcome — plot_outcome","text":"","code":"plot_outcome(   data,   x,   y,   altered = FALSE,   mito_ribo = FALSE,   damage_column = \"Damaged_Level\",   target_damage = c(0.1, 0.8),   palette = c(\"grey\", \"#7023FD\", \"#E60006\") )"},{"path":"https://alicenjoyhenning.github.io/DamageDetective/reference/plot_outcome.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot_outcome — plot_outcome","text":"data Data frame containing summary statistics x Column name input data frame containing values plotted x axis scatter plot. y Column name input data frame containing values plotted y axis scatter plot. altered Boolean specifying whether plot focusing data alteration. Default FALSE. mito_ribo Boolean specifying whether mitochondrial ribosomal proportions plotted. damage_column Column name input data frame containing values use colouring point plot. target_damage Numeric vector specifying range target damage levels palette String specifying three colours used create continuous colour palette colouring 'damage_column'. Default range purple red, c(\"grey\", \"#7023FD\", \"#E60006\").","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/reference/plot_outcome.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot_outcome — plot_outcome","text":"'ggplot2' object","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/reference/plot_outcome.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"plot_outcome — plot_outcome","text":"Provides customizable visualization distribution quality control metrics cells. Used detect_damage, select_penalty, simulate_counts visualise output damage simulation. instances use package, plot_outcome plots y axis proportion counts originating mitochondrial genome. provides rough estimate damage anticipate cells cluster near common mitochondrial proportion fewer, likely damaged, outliers lie higher points. x axis either number non-zero genes expressed proportion counts coming ribosomal genes. Based observations true single-cell data, anticipate plots follow shape—exponential decay—cells high mitochondrial proportions fewer expressed features low ribosomal proportions. egregious deviation shape indicates simulated data poorly represents true data, especially compared directly unaltered cells.","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/reference/plot_outcome.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plot_outcome — plot_outcome","text":"","code":"set.seed(42)  # For reproducibility library(ggplot2)  # Generate example an example data frame df <- data.frame(  Features = runif(1000, 0, 6000),  Mt.percent = runif(1000, 0, 1),  Damaged_Level = runif(1000, 0, 1) )  plot <- plot_outcome(  data = df,  x = \"Features\",  y = \"Mt.percent\",  damage_column = \"Damaged_Level\" )"},{"path":"https://alicenjoyhenning.github.io/DamageDetective/reference/select_penalty.html","id":null,"dir":"Reference","previous_headings":"","what":"select_penalty — select_penalty","title":"select_penalty — select_penalty","text":"Recommended prerequisite function detect_damage() estimates ideal ribosome_penalty value input data.","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/reference/select_penalty.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"select_penalty — select_penalty","text":"","code":"select_penalty(   count_matrix,   organism = \"Hsap\",   mito_quantile = 0.75,   penalty_range = c(0.001, 0.5),   penalty_step = 0.005,   max_penalty_trials = 10,   target_damage = c(0.1, 0.99),   damage_distribution = \"right_skewed\",   distribution_steepness = \"steep\",   beta_shape_parameters = NULL,   stability_limit = 3,   damage_proportion = 0.15,   annotated_celltypes = FALSE,   return_output = \"penalty\",   ribosome_penalty = NULL,   generate_plot = FALSE,   verbose = TRUE )"},{"path":"https://alicenjoyhenning.github.io/DamageDetective/reference/select_penalty.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"select_penalty — select_penalty","text":"count_matrix Matrix dgCMatrix containing counts single cell RNA sequencing data. organism String specifying organism origin input data two standard options, \"Hsap\" \"Mmus\" user wishes use non-standard organism must input list containing strings patterns match mitochondrial ribosomal genes organism. available, nuclear-encoded genes likely retained nucleus, nuclear speckles, must also specified. example humans , organism = c(mito_pattern = \"^MT-\", ribo_pattern = \"^(RPS|RPL)\", nuclear <- c(\"NEAT1\",\"XIST\", \"MALAT1\") Default \"Hsap\" mito_quantile Numeric specifying proportion mitochondrial content cells used sampling simulation. Default 0.75, meaning cells less 0.75 proportion mitochondrial counts sampled simulated. penalty_range Numerical vector length 2 specifying lower upper limit values tested ribosomal penalty. Default c(0.001, 0.5). penalty_step Numeric specifying value added increment penalty tested. Default 0.005. max_penalty_trials Numeric specifying maximum number iterations ribosomal penalty value. Default 10. target_damage Numeric vector specifying upper lower range level damage introduced. , damage refers amount cytoplasmic RNA lost cell values closer 1 indicate loss therefore heavily damaged cells. Default c(0.1, 0.8) damage_distribution String specifying whether distribution damage levels among damaged cells shifted towards upper lower range damage specified 'target_damage' follow symmetric distribution . three valid options: \"right_skewed\" \"left_skewed\" \"symmetric\" Default \"right_skewed\" distribution_steepness String specifying concentrated spread damaged cells mean target distribution specified 'target_damage'. , increase steepness manifests apparent skewness.three valid options: \"shallow\" \"moderate\" \"steep\" Default \"moderate\" beta_shape_parameters Numeric vector allows shape parameters beta distribution defined explicitly. offers greater flexibility allowed 'damage_distribution' 'distribution_steepness' parameters override defaults offer. Default 'NULL' stability_limit Numeric specifying number additional iterations allotted median minimum distance artificial cells true cells greater previous minimum distance. idea higher penalty causing improvement output, little need continue testing larger penalties. Default 3. damage_proportion Numeric describing proportion input data altered resemble damaged data. Must range 0 1. annotated_celltypes Boolean specifying whether input matrix cell type information stored. Default FALSE return_output String specifying form output function take options either, \"penalty\" \"full\" \"Penalty\" return ribosomal penalty resulted best performance (smallest median distance artificial true cells). \"full\" return ideal ribosomal penalty median distance artificial true cells penalty tested. allows insight penalty selected. Default \"penalty\". ribosome_penalty Numeric specifying factor probability loosing transcript ribosomal gene multiplied . , values closer 0 represent greater penalty. Default 0.01. generate_plot Boolean specifying whether output QC plot outputted. QC plots generated default recommend verifying perturbed data retains characteristics true single cell data. Default TRUE. verbose Boolean specifying whether messages function progress displayed console. Default TRUE.","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/reference/select_penalty.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"select_penalty — select_penalty","text":"Numeric representing ideal ribosomal penalty input dataset.","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/reference/select_penalty.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"select_penalty — select_penalty","text":"Based observations true single cell data, find ribosomal RNA loss occurs less frequently expected based abundance alone. adjust , probability scores ribosomal gene loss multiplied numerical value (ribosome_penalty) 0 1. Lower values (closer zero) better approximate true data, default 0.01, though can often greatly refined input data. Refinement follows similar workflow detect_damage, rather evaluating similarity true cells sets artificial cells infer level damage, evaluate similarity artificial cells true cells infer effectiveness approximation true data. calculated using distance nearest true cell (dTNN) taken artificial cell found using Euclidean distance matrix. median dTNN computed iteratively stabilization worsening trend. ideal ribosomal_penalty selected generated lowest dTNN.","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/reference/select_penalty.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"select_penalty — select_penalty","text":"","code":"data(\"test_counts\", package = \"DamageDetective\")  penalty <- select_penalty(  count_matrix = test_counts,  generate_plot = FALSE ) #> Testing penalty of 0.001... #> Testing penalty of 0.006... #> Testing penalty of 0.011... #> Testing penalty of 0.016... #> Testing penalty of 0.021... #> Testing penalty of 0.026... #> Stopping early: dTNN is no longer improving."},{"path":"https://alicenjoyhenning.github.io/DamageDetective/reference/simulate_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"simulate_counts — simulate_counts","title":"simulate_counts — simulate_counts","text":"Function simulate damaged cells perturbing gene expression existing cells.","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/reference/simulate_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"simulate_counts — simulate_counts","text":"","code":"simulate_counts(   count_matrix,   damage_proportion,   annotated_celltypes = FALSE,   target_damage = c(0.1, 0.8),   damage_distribution = \"right_skewed\",   distribution_steepness = \"moderate\",   beta_shape_parameters = NULL,   ribosome_penalty = 0.01,   generate_plot = TRUE,   organism = \"Hsap\" )"},{"path":"https://alicenjoyhenning.github.io/DamageDetective/reference/simulate_counts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"simulate_counts — simulate_counts","text":"count_matrix Matrix dgCMatrix containing counts single cell RNA sequencing data. damage_proportion Numeric describing proportion input data altered resemble damaged data. Must range 0 1. annotated_celltypes Boolean specifying whether input matrix cell type information stored. Default FALSE target_damage Numeric vector specifying upper lower range level damage introduced. , damage refers amount cytoplasmic RNA lost cell values closer 1 indicate loss therefore heavily damaged cells. Default c(0.1, 0.8) damage_distribution String specifying whether distribution damage levels among damaged cells shifted towards upper lower range damage specified 'target_damage' follow symmetric distribution . three valid options: \"right_skewed\" \"left_skewed\" \"symmetric\" Default \"right_skewed\" distribution_steepness String specifying concentrated spread damaged cells mean target distribution specified 'target_damage'. , increase steepness manifests apparent skewness.three valid options: \"shallow\" \"moderate\" \"steep\" Default \"moderate\" beta_shape_parameters Numeric vector allows shape parameters beta distribution defined explicitly. offers greater flexibility allowed 'damage_distribution' 'distribution_steepness' parameters override defaults offer. Default 'NULL' ribosome_penalty Numeric specifying factor probability loosing transcript ribosomal gene multiplied . , values closer 0 represent greater penalty. Default 0.01. generate_plot Boolean specifying whether output QC plot outputted. QC plots generated default recommend verifying perturbed data retains characteristics true single cell data. Default TRUE. organism String specifying organism origin input data two standard options, \"Hsap\" \"Mmus\" user wishes use non-standard organism must input list containing strings patterns match mitochondrial ribosomal genes organism. available, nuclear-encoded genes likely retained nucleus, nuclear speckles, must also specified. example humans , organism = c(mito_pattern = \"^MT-\", ribo_pattern = \"^(RPS|RPL)\", nuclear <- c(\"NEAT1\",\"XIST\", \"MALAT1\") Default \"Hsap\"","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/reference/simulate_counts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"simulate_counts — simulate_counts","text":"list containing altered count matrix, data frame summary statistics, , specified, 'ggplot2' object quality control metrics alteration.","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/reference/simulate_counts.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"simulate_counts — simulate_counts","text":"DamageDetective models damage single-cell RNA sequencing data loss cytoplasmic RNA, cells experiencing greater RNA loss assumed extensively damaged, minimal loss considered largely intact. perturbation process introduces RNA loss existing cells controlled three key parameters: target proportion damage,  specifies fraction cells perturbed; target level damage, defines extent RNA loss across cells; target distribution damage, determines different levels RNA loss distributed across cells. Based parameters, cells randomly selected assigned target proportion RNA loss. total number transcripts removed determined, perturbation applied weighted sampling without replacement cytoplasmic gene counts. , probability transcript loss determined gene abundance, highly expressed genes likely lose transcripts. target RNA loss reached, cell's expression profile updated, process repeats selected cells.","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/reference/simulate_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"simulate_counts — simulate_counts","text":"","code":"data(\"test_counts\", package = \"DamageDetective\")  simulated_damage <- simulate_counts(   count_matrix = test_counts,   damage_proportion = 0.5,   ribosome_penalty = 0.01,   target_damage = c(0.5, 0.9) )"},{"path":"https://alicenjoyhenning.github.io/DamageDetective/reference/test_counts.html","id":null,"dir":"Reference","previous_headings":"","what":"Test Counts — test_counts","title":"Test Counts — test_counts","text":"dataset contains sparse matrix testing purposes.","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/reference/test_counts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test Counts — test_counts","text":"","code":"test_counts"},{"path":"https://alicenjoyhenning.github.io/DamageDetective/reference/test_counts.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Test Counts — test_counts","text":"sparse matrix 10 009 features 500 cells. features Numeric. number features (genes) dataset. cells Numeric. number cells dataset.","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/reference/test_counts.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Test Counts — test_counts","text":"Generated testing purposes","code":""},{"path":"https://alicenjoyhenning.github.io/DamageDetective/reference/test_counts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test Counts — test_counts","text":"","code":"data(\"test_counts\", package = \"DamageDetective\")"},{"path":"https://alicenjoyhenning.github.io/DamageDetective/news/index.html","id":"damagedetective-001","dir":"Changelog","previous_headings":"","what":"DamageDetective 0.0.1","title":"DamageDetective 0.0.1","text":"DamageDetective package released available installation GitHub. CRAN submission progress.","code":""}]
